name: CMake Build Matrix

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu 22.04 GCC",
              os: "ubuntu-22.04",
              cc: "/usr/bin/gcc",
              cxx: "/usr/bin/g++",
              format: "/usr/bin/clang-format-14",
              tidy: "/usr/bin/clang-tidy-14",
            }
    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install Dependencies (Ubuntu)
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}
        run: sudo bash ./build_support/packages.sh -y

      - name: Install Dependencies (OSX)
        if: runner.os == 'macOS'
        working-directory: ${{github.workspace}}
        run: bash ./build_support/packages.sh -y

      - name: Configure CMake
        run: CC=${{matrix.config.cc}} CXX=${{matrix.config.cxx}} cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCLANG_FORMAT_BIN=${{matrix.config.format}} -DCLANG_TIDY_BIN=${{matrix.config.tidy}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Check Format
        working-directory: ${{github.workspace}}/build
        run: make check-format

      - name: Check Lint
        working-directory: ${{github.workspace}}/build
        run: make check-lint

      - name: Check Clang Tidy
        working-directory: ${{github.workspace}}/build
        run: make check-clang-tidy

      - name: Check Tests (Ubuntu)
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}/build
        run: make build-tests && make check-public-ci-tests

      - name: Check Tests (OSX)
        if: runner.os == 'macOS'
        working-directory: ${{github.workspace}}/build
        # Disable container overflow checks on OSX
        run: make build-tests && make check-public-ci-tests
